{"version":3,"sources":["Movies.js","App.js","serviceWorker.js","index.js"],"names":["Movies","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props$movie","props","movie","id","year","title","summary","torrents","small_cover_image","genres","react_default","a","createElement","className","src","alt","map","genre","index","slice","torrent","href","url","Component","App","state","isLoading","movies","getMovies","_callee","_yield$axios$get","regenerator_default","wrap","_context","prev","next","axios","get","sent","data","_this","setState","console","log","stop","_this$state","src_Movies_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAuDeA,SAnDf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WACW,IAAAC,EASHT,KAAKU,MAAMC,MAPbC,EAFKH,EAELG,GACAC,EAHKJ,EAGLI,KACAC,EAJKL,EAILK,MACAC,EALKN,EAKLM,QACAC,EANKP,EAMLO,SACAC,EAPKR,EAOLQ,kBACAC,EARKT,EAQLS,OAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQf,IAAKK,GAC1BO,EAAAC,EAAAC,cAAA,OAAKE,IAAKN,EAAmBO,IAAKV,EAAOA,MAAOA,IAChDK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBR,GAC9BK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACXJ,EAAOO,IAAI,SAACC,EAAOC,GAClB,OACER,EAAAC,EAAAC,cAAA,MAAId,IAAKoB,EAAOL,UAAU,iBACvBI,MAKTP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeT,GAC7BM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBP,EAAQa,MAAM,EAAG,KAAhD,QACAT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACXN,EAASS,IAAI,SAACI,EAASF,GAAV,OACZR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZH,EAAAC,EAAAC,cAAA,KAAGd,IAAKoB,EAAOG,KAAMD,EAAQE,KAA7B,sBA9BhBnC,EAAA,CAA4BoC,cCgDbC,6MA7CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,MAGVC,+BAAY,SAAAC,IAAA,IAAAC,EAAAH,EAAA,OAAAI,EAAApB,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAKAC,IAAMC,IACd,yDANQ,OAAAP,EAAAG,EAAAK,KAGEX,EAHFG,EAERS,KACEA,KAAQZ,OAKZa,EAAKC,SAAS,CACZf,WAAW,EACXC,WAEFe,QAAQC,IAAIhB,GAZF,wBAAAM,EAAAW,SAAAf,yFAgBVtC,KAAKqC,6CAGE,IAAAiB,EACuBtD,KAAKkC,MAA3BC,EADDmB,EACCnB,UAAWC,EADZkB,EACYlB,OACnB,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAASC,UAAU,aAChBa,EACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,gBAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZc,EAAOX,IAAI,SAACd,GAAD,OACVQ,EAAAC,EAAAC,cAACkC,EAAD,CAAQhD,IAAKI,EAAMC,GAAID,MAAOA,gBArC5BqB,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4a0521f5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movies.css\";\n\nexport class Movies extends Component {\n  render() {\n    const {\n      id,\n      year,\n      title,\n      summary,\n      torrents,\n      small_cover_image,\n      genres,\n    } = this.props.movie;\n    return (\n      <div className='movie' key={id}>\n        <img src={small_cover_image} alt={title} title={title} />\n        <div className='movie__column'>\n          <h3 className='movie__title'>{title}</h3>\n          <ul className='movie__genres'>\n            {genres.map((genre, index) => {\n              return (\n                <li key={index} className='genres__genre'>\n                  {genre}\n                </li>\n              );\n            })}\n          </ul>\n          <h4 className='movie__year'>{year}</h4>\n          <p className='movie__summary'>{summary.slice(0, 140)}....</p>\n          <ul className='torrents'>\n            {torrents.map((torrent, index) => (\n              <li className='torrents__torent'>\n                <a key={index} href={torrent.url}>\n                  Download\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovies.propTypes = {\n  id: PropTypes.number,\n  year: PropTypes.number,\n  title: PropTypes.string,\n  summary: PropTypes.string,\n  poster: PropTypes.string,\n  genres: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default Movies;\n","import React, { Component } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport Movies from \"./Movies\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts.mx/api/v2/list_movies.json?sort_by=rating\"\r\n    );\r\n    this.setState({\r\n      isLoading: false,\r\n      movies,\r\n    });\r\n    console.log(movies);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <div>\r\n        <section className='container'>\r\n          {isLoading ? (\r\n            <div className='loader'>\r\n              <span className='loader__text'>Loading ...</span>\r\n            </div>\r\n          ) : (\r\n            <div className='movies'>\r\n              {movies.map((movie) => (\r\n                <Movies key={movie.id} movie={movie} />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}